<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC "-//Puppy Crawl//DTD Check Configuration 1.2//EN" "http://www.puppycrawl.com/dtds/configuration_1_2.dtd">
<!--

  Checkstyle 4.4 configuration for CSc 305 at Cal Poly.

    - the Java Language Specification at
      http://java.sun.com/docs/books/jls/second_edition/html/index.html

      http://www.csc.calpoly.edu/%7Ejdalbey/SWE/code_std.html

  To completely disable a check, just comment it out or delete it from the file.

  Finally, it is worth reading the documentation:
      http://checkstyle.sourceforge.net/

  DOCUMENT HISTORY
  12/20/09 Merged in changes from 103 which mostly relax restrictions.
  4/9/06 Added Severity = Warning to several checks.
  4/14/06 Removed check: EqualsHashCode
          Don't require Javadoc on PRIVATE methods.
          Changed LineLength to 89: The length of a line in Eclipse at 800x600 resolution.
  4/19/06 Changed VisibilityModifier to protectedAllowed.
          Allow types to have underscore characters in the name.
  5/3/06  Made method length check a warning and instead
          made JavaNCSS count an error.
  5/22/06 Added custom check for one letter variable names.
          Added custom check for logic structure comments.
  3/28/16 Revised for 305.

-->
<module name="Checker">

    <!-- Checks that a package.html file exists for each package.     -->
    <!-- See http://checkstyle.sf.net/config_javadoc.html#PackageHtml -->
<!--     <module name="PackageHtml"/>   -->

    <!-- Checks whether files end with a new line.                        -->
    <!-- See http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile -->
    <!-- OFF module name="NewlineAtEndOfFile"/ -->

    <!-- Checks that property files contain the same keys.         -->
    <!-- See http://checkstyle.sf.net/config_misc.html#Translation -->
    <!-- OFF module name="Translation"/ -->


    <module name="TreeWalker">
        <!-- To configure the check that makes comments available to  -->
        <!-- the supression filter:  -->
        <module name="FileContentsHolder"/>

        <!-- Custom checks written for Dalbey's coding standard -->
        <!-- Single character variable names not allowed.       -->
        <module name="VariableNameLength"/>
        <!-- Logic structures must be preceded by a comment.    -->
        <module name="LogicComment"/>

        <property name="tabWidth" value="4"/>
        <!-- Checks for Javadoc comments.                     -->
        <!-- See http://checkstyle.sf.net/config_javadoc.html -->
        <module name="JavadocMethod">
            <!-- Ensure only public methods contain javadoc? -->
            <property name="scope" value="public"/>
            <property name="allowUndeclaredRTE" value="true"/>
            <property name="allowThrowsTagsForSubclasses" value="true"/>
            <property name="allowMissingThrowsTags" value="true"/>
        </module>
        <module name="JavadocType"/>
        <module name="JavadocVariable">
            <property name="scope" value="public"/>
        </module>
        <module name="JavadocStyle">
            <property name="scope" value="public"/>
            <property name="checkHtml" value="false"/>
            <property name="checkEmptyJavadoc" value="true"/>
            <property name="checkFirstSentence" value="false"/>
        </module>


        <!-- Checks for Naming Conventions.                  -->
        <!-- See http://checkstyle.sf.net/config_naming.html -->
        <module name="ConstantName">
            <property name="format" value="^k[A-Z][a-zA-Z0-9]*$"/>
        </module>
        <module name="LocalFinalVariableName"/>
        <module name="LocalVariableName"/>
        <module name="MemberName">
            <property name="format" value="^[a-z][_a-zA-Z0-9]*$"/>
        </module>     
        <module name="MethodName"/>
        <!-- Permit package names to be one word -->
        <module name="PackageName">
            <property name="format" value="^[a-z]+([a-zA-Z_\.][a-zA-Z0-9_\.][a-zA-Z0-9_]*)*$"/>
        </module>
        <module name="ParameterName"/>
        <module name="StaticVariableName"/>
        <module name="TypeName">
            <property name="format" value="^[A-Z][_a-zA-Z0-9]*$"/>
        </module>


        <!-- Checks for Headers                                -->
        <!-- See http://checkstyle.sf.net/config_header.html   -->
        <!-- <module name="Header">                            -->
            <!-- The follow property value demonstrates the ability     -->
            <!-- to have access to ANT properties. In this case it uses -->
            <!-- the ${basedir} property to allow Checkstyle to be run  -->
            <!-- from any directory within a project. See property      -->
            <!-- expansion,                                             -->
            <!-- http://checkstyle.sf.net/config.html#properties        -->
            <!-- <property                                              -->
            <!--     name="headerFile"                                  -->
            <!--     value="${basedir}/java.header"/>                   -->
        <!-- </module> -->

        <!-- Following interprets the header file as regular expressions. -->
        <!-- <module name="RegexpHeader"/>                                -->


        <!-- Checks for imports                              -->
        <!-- See http://checkstyle.sf.net/config_import.html -->
        <!-- OFF module name="AvoidStarImport"/ -->
        <module name="IllegalImport"/> <!-- defaults to sun.* packages -->
        <!-- OFF module name="RedundantImport"/ -->
        <!-- OFF module name="UnusedImports"/ -->


        <!-- Checks for Size Violations.                    -->
        <!-- See http://checkstyle.sf.net/config_sizes.html -->
        <module name="FileLength"/>
        <module name="LineLength">
            <property name="max" value="89"/>
        </module>
        <module name="MethodLength">
            <property name="max" value="55"/>
            <property name="countEmpty" value="false"/>
            <property name="severity" value="warning"/>
        </module>
        <module name="ParameterNumber"/>


        <!-- Checks for whitespace                               -->
        <!-- See http://checkstyle.sf.net/config_whitespace.html -->
        <module name="Indentation">
            <property name="basicOffset" value="4"/>
            <property name="braceAdjustment" value="0"/>
            <property name="caseIndent" value="4"/>
        </module>
	<!--
        <module name="EmptyForIteratorPad">
	    <property name="option" value="space"/>
	</module>
	
        <module name="MethodParamPad"/>
        <module name="NoWhitespaceAfter">
            <property name="tokens" value="BNOT,DEC,DOT,INC,LNOT,UNARY_MINUS,UNARY_PLUS"/>
            <property name="allowLineBreaks" value="false"/>
	</module  -->
        <module name="NoWhitespaceBefore">
            <property name="tokens" value="POST_DEC,POST_INC"/>
	</module>
        <module name="NoWhitespaceBefore">
            <property name="tokens" value="DOT"/>
            <property name="allowLineBreaks" value="true"/>
        </module>
	<!--
        <module name="OperatorWrap"/>
        <module name="OperatorWrap">
            <property name="tokens" value="ASSIGN, DIV_ASSIGN, PLUS_ASSIGN, MINUS_ASSIGN, STAR_ASSIGN, MOD_ASSIGN, SR_ASSIGN, BSR_ASSIGN, SL_ASSIGN, BXOR_ASSIGN, BOR_ASSIGN, BAND_ASSIGN"/>
            <property name="option" value="eol"/>
        </module>
        <module name="ParenPad">
	    <property name="option" value="space"/>
	</module>
	-->
        <!-- <module name="TypecastParenPad"/>  -->
        <module name="TabCharacter"/>
        <module name="WhitespaceAfter">
            <property name="tokens" value="COMMA, SEMI"/>
        </module>
        <!-- module name="WhitespaceAround">
            <property name="tokens" value="ASSIGN"/>
            <property name="allowEmptyConstructors" value="true"/>
            <property name="allowEmptyMethods" value="true"/>
        </module  -->


        <!-- Modifier Checks                                    -->
        <!-- See http://checkstyle.sf.net/config_modifiers.html -->
    <!--
        <module name="ModifierOrder"/>
        <module name="RedundantModifier"/>

    -->

        <!-- Checks for blocks. You know, those {}'s         -->
        <!-- See http://checkstyle.sf.net/config_blocks.html -->
	<!--
        <module name="AvoidNestedBlocks">
	    <property name="allowInSwitchCase" value="true"/>
		</module>
	-->

        <module name="EmptyBlock">
		    <property name="option" value="stmt"/>
		    <property name="tokens" value="LITERAL_CATCH"/>
		</module>
        <!-- left brace must be on a new line -->
        <module name="LeftCurly">
            <property name="option" value="nl"/>
        </module>
        <module name="NeedBraces"/>
        <module name="RightCurly">
            <property name="option" value="alone"/>
        </module>


        <!-- Checks for common coding problems               -->
        <!-- See http://checkstyle.sf.net/config_coding.html -->
        <module name="AvoidInlineConditionals"/>
        <module name="DoubleCheckedLocking"/>    <!-- MY FAVOURITE -->
        <module name="EmptyStatement"/>
        <!-- <module name="EqualsHashCode"/>  -->
        <module name="HiddenField">
            <property name="ignoreConstructorParameter" value="true"/>
            <property name="ignoreSetter" value="true"/>
        </module>


        <module name="IllegalInstantiation"/>
        <module name="InnerAssignment">
            <property name="severity" value="warning"/>
        </module>
        <!-- module name="MagicNumber"/ -->
        <module name="MissingSwitchDefault"/>
        <module name="RedundantThrows">
            <property name="severity" value="warning"/>
        </module>

        <module name="SimplifyBooleanExpression"/>
        <module name="SimplifyBooleanReturn"/>

        <!-- Checks for class design                         -->
        <!-- See http://checkstyle.sf.net/config_design.html -->
<!--         <module name="DesignForExtension"/>   -->
        <module name="FinalClass"/>
        <!-- module name="HideUtilityClassConstructor"/ -->
        <module name="InterfaceIsType"/>
        <module name="VisibilityModifier">
            <property name="protectedAllowed" value="true"/>
        </module>

        <!-- Metrics checks.                   -->
        <module name="ClassFanOutComplexity"/>
        <module name="CyclomaticComplexity">
            <property name="max" value="12"/>
            <property name="severity" value="warning"/>
        </module>
    <!--
        <module name="NPathComplexity">
            <property name="severity" value="warning"/>
        </module>
        <module name="JavaNCSS"/>

    -->



        <!-- Miscellaneous other checks.                   -->
        <!-- See http://checkstyle.sf.net/config_misc.html -->
        <module name="ArrayTypeStyle"/>
<!--         <module name="FinalParameters"/>   -->
	<module name="StringLiteralEquality"/>
	<module name="InnerAssignment"/>
	<module name="FallThrough"/>
        <module name="TodoComment"/>
        <module name="UpperEll"/>
        <module name="GenericIllegalRegexp">
            <property name="format" value="^\s*\*\s*(Write|Place) a.*here\.\s*$"/>
            <property name="message" value="Please write your own descriptive comment."/>
        </module>
        <module name="GenericIllegalRegexp">
            <property name="format" value="^\s*\*\s*@author\s+your-pid"/>
            <property name="message" value="Place your own name after the @author tag (and your partner's, if this is a lab assignment)."/>
        </module>
        <module name="GenericIllegalRegexp">
            <property name="format" value="^\s*\*\s*@version.*place the date here"/>
            <property name="message" value="Place the date after the @version tag."/>
        </module>


    </module>
    <!-- To configure a filter to suppress audit events between a comment
    containing line BEGIN GENERATED CODE and a comment containing
    line END GENERATED CODE: -->
    <module name="SuppressionCommentFilter">
        <property name="offCommentFormat" value="BEGIN GENERATED CODE"/>
        <property name="onCommentFormat" value="END GENERATED CODE"/>
    </module>
</module>
